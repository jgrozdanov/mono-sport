// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Drawing;

namespace SportNet
{
	public partial class SignUpController : UIViewController
	{
		public SignUpController (IntPtr handle) : base (handle)
		{
		}
		UIImagePickerController imagePicker;
		public override void ViewWillAppear (bool animated)
		{
			if (((AppDelegate)UIApplication.SharedApplication.Delegate).profilePhoto == null) {
				this.Image.Image = UIImage.FromFile ("./Assets/profile.png");
			} else {
				this.Image.Image = ((AppDelegate)UIApplication.SharedApplication.Delegate).profilePhoto;
			}
			this.ImagePicker.SetBackgroundImage (UIImage.FromFile ("./Assets/choose.png"), UIControlState.Normal);
			this.FirstName.Background = UIImage.FromFile ("./Assets/input.png");
			this.FirstName.TextColor = UIColor.FromRGB (102, 102, 102);
			this.LastName.Background = UIImage.FromFile ("./Assets/input.png");
			this.Email.Background = UIImage.FromFile ("./Assets/input.png");
			this.Password.Background = UIImage.FromFile ("./Assets/input.png");
			this.CreateAccount.SetBackgroundImage (UIImage.FromFile ("./Assets/buttonlong.png"), UIControlState.Normal);
			this.Facebook.SetBackgroundImage (UIImage.FromFile ("./Assets/facebook.png"), UIControlState.Normal);
			this.Twitter.SetBackgroundImage (UIImage.FromFile ("./Assets/twitter.png"), UIControlState.Normal);
			this.GooglePlus.SetBackgroundImage (UIImage.FromFile ("./Assets/google.png"), UIControlState.Normal);

			// hack the textfields to add padding
			// apparently this is not so easy in ios
			this.FirstName.LeftView = new UIView (new RectangleF (0, 0, 5, 30));
			this.FirstName.LeftViewMode = UITextFieldViewMode.Always;
			this.LastName.LeftView = new UIView (new RectangleF (0, 0, 5, 30));
			this.LastName.LeftViewMode = UITextFieldViewMode.Always;
			this.Email.LeftView = new UIView (new RectangleF (0, 0, 5, 30));
			this.Email.LeftViewMode = UITextFieldViewMode.Always;
			this.Password.LeftView = new UIView (new RectangleF (0, 0, 5, 30));
			this.Password.LeftViewMode = UITextFieldViewMode.Always;

			var button = new UIBarButtonItem ("Back", UIBarButtonItemStyle.Plain, null);
			var custom = new UIButton (new RectangleF (0, 0, 26, 15));
			custom.SetBackgroundImage(UIImage.FromFile("./Assets/back.png"), UIControlState.Normal);
			custom.TouchUpInside += (sender, e) => NavigationController.PopViewControllerAnimated (true);
			button.CustomView = custom;

			this.NavigationItem.LeftBarButtonItem = button;
			this.NavigationController.SetNavigationBarHidden (false, false);
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.CreateAccount.TouchUpInside += (object sender, EventArgs e) => {
				UIStoryboard board = UIStoryboard.FromName ("MainStoryboard", null);
				PreferencesController welcome = (PreferencesController)board.InstantiateViewController ("preferencescontroller");
				welcome.ImageSources = new string[] { "aaa", "a", "a", "a", "a", "a", "a", "a", "a" };

				this.NavigationController.PushViewController(welcome, true);
			};
			this.ImagePicker.TouchUpInside += (s, e) => {
				// create a new picker controller
				imagePicker = new UIImagePickerController ();

				// set our source to the photo library
				imagePicker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;

				// set what media types
				imagePicker.MediaTypes = UIImagePickerController.AvailableMediaTypes (UIImagePickerControllerSourceType.PhotoLibrary);

				imagePicker.FinishedPickingMedia += Handle_FinishedPickingMedia;
				imagePicker.Canceled += Handle_Canceled;

				// show the picker
				NavigationController.PresentViewController (imagePicker, true, null);

			};
		}
		// Do something when the 
		void Handle_Canceled (object sender, EventArgs e) {
			Console.WriteLine ("picker cancelled");
			imagePicker.DismissViewController(true,null);
		}

		// This is a sample method that handles the FinishedPickingMediaEvent
		protected void Handle_FinishedPickingMedia (object sender, UIImagePickerMediaPickedEventArgs e)
		{
			// determine what was selected, video or image
			bool isImage = false;
			switch(e.Info[UIImagePickerController.MediaType].ToString())
			{
				case "public.image":
				Console.WriteLine("Image selected");
				isImage = true;
				break;

				case "public.video":
				Console.WriteLine("Video selected");
				break;
			}

			Console.Write("Reference URL: [" + UIImagePickerController.ReferenceUrl + "]");

			// get common info (shared between images and video)
			NSUrl referenceURL = e.Info[new NSString("UIImagePickerControllerReferenceUrl")] as NSUrl;
			if (referenceURL != null) 
				Console.WriteLine(referenceURL.ToString ());

			// if it was an image, get the other image info
			if(isImage) {

				// get the original image
				UIImage originalImage = e.Info[UIImagePickerController.OriginalImage] as UIImage;
				if(originalImage != null) {
					// do something with the image
					Console.WriteLine ("got the original image");
					((AppDelegate)UIApplication.SharedApplication.Delegate).profilePhoto = originalImage;
				}

				// get the edited image
				UIImage editedImage = e.Info[UIImagePickerController.EditedImage] as UIImage;
				if(editedImage != null) {
					// do something with the image
					Console.WriteLine ("got the edited image");
					((AppDelegate)UIApplication.SharedApplication.Delegate).profilePhoto = editedImage;
				}

				//- get the image metadata
				NSDictionary imageMetadata = e.Info[UIImagePickerController.MediaMetadata] as NSDictionary;
				if(imageMetadata != null) {
					// do something with the metadata
					Console.WriteLine ("got image metadata");
				}

			}
			// if it's a video
			else {
				// get video url
				NSUrl mediaURL = e.Info[UIImagePickerController.MediaURL] as NSUrl;
				if(mediaURL != null) {
					//
					Console.WriteLine(mediaURL.ToString());
				}
			}

			// dismiss the picker
			imagePicker.DismissViewController(true,null);
		}
	}
}
