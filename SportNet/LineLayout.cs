// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using System.Collections.Generic;
using MonoTouch.CoreGraphics;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.CoreAnimation;

namespace SportNet
{
	public partial class LineLayout : UICollectionViewFlowLayout
	{
		public LineLayout (IntPtr handle) : base (handle)
		{
		}


		public LineLayout ()
		{
			ItemSize = new SizeF (320, 300);
			ScrollDirection = UICollectionViewScrollDirection.Horizontal;
			SectionInset = new UIEdgeInsets (0, 0, 0, 0);
			MinimumInteritemSpacing = 0;
			MinimumLineSpacing = 0;
		}

		public override bool ShouldInvalidateLayoutForBoundsChange (RectangleF newBounds)
		{
			return true;
		}

		public override UICollectionViewLayoutAttributes[] LayoutAttributesForElementsInRect (RectangleF rect)
		{
			var atts = base.LayoutAttributesForElementsInRect (rect);
			List<UICollectionViewLayoutAttributes> newAtts = new List<UICollectionViewLayoutAttributes>();

			foreach (var item in atts) {
				if ((item.Frame.Location.X + item.Frame.Size.Width <= this.CollectionView.ContentSize.Width) &&
					(item.Frame.Location.Y + item.Frame.Size.Height <= this.CollectionView.ContentSize.Height)) {
					newAtts.Add (item);
				}
			}

			return newAtts.ToArray();
		}

//		public override PointF TargetContentOffset (PointF proposedContentOffset, PointF scrollingVelocity)
//		{
//			float offsetAdjustment = float.MaxValue;
//			float horizontalCenter = (float)(proposedContentOffset.X + this.CollectionView.Bounds.Size.Width / 2);
//
//			RectangleF targetRect = new RectangleF (proposedContentOffset.X, 0, this.CollectionView.Bounds.Size.Width, this.CollectionView.Bounds.Size.Height);
//			var array = base.LayoutAttributesForElementsInRect (targetRect);
//			foreach (var attributes in array) {
//				float itemHorizontalCenter = attributes.Center.X;
//				if (Math.Abs (itemHorizontalCenter - horizontalCenter) < Math.Abs (offsetAdjustment)) {
//					offsetAdjustment = itemHorizontalCenter - horizontalCenter;
//				}
//			}
//
//			return new PointF (proposedContentOffset.X + offsetAdjustment, proposedContentOffset.Y);
//		}
	}
}
